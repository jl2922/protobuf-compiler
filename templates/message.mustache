(function() {
  var {{messageName}} = function() {};

  // Fields.
  {{messageName}}.Builder = function() {};
  {{messageName}}.newBuilder = function() {
    var builder = new {{messageName}}.Builder();
    {{#messageFields}}
    {{#isRepeated}}
    builder.{{camelCaseFieldName}} = [];
    {{/isRepeated}}
    {{/messageFields}}
    return builder;
  };

  {{#messageFields}}
  {{#isRepeated}}
  {{messageName}}.prototype.{{getterName}}List = function() {
    return this.{{camelCaseFieldName}};
  };
  {{/isRepeated}}
  {{^isRepeated}}
  {{messageName}}.prototype.{{getterName}} = function() {
    return this.{{camelCaseFieldName}};
  };
  {{/isRepeated}}
  {{/messageFields}}

  {{messageName}}.prototype.toJSON = function() {
    var json = [];
    var value;
    {{#messageFields}}
    value = this.{{camelCaseFieldName}};
    if (value != undefined) {
      json[{{fieldTag}} - 1] = value;
    }
    {{/messageFields}}
    return json;
  };

  {{#messageFields}}
  {{^isRepeated}}
  {{messageName}}.Builder.prototype.{{setterName}} = function(value) {
    this.{{camelCaseFieldName}} = value;
    return this;
  };
  {{/isRepeated}}
  {{#isRepeated}}
  {{messageName}}.Builder.prototype.{{adderName}} = function(value) {
    this.{{camelCaseFieldName}}.push(value);
    return this;
  };
  {{/isRepeated}}
  {{/messageFields}}

  {{messageName}}.Builder.prototype.fromJSON = function(jsonString) {
    var json = JSON.parse(jsonString);
    var value;
    {{#messageFields}}
    value = json[{{fieldTag}} - 1];
    if (value != undefined && value != null) {
      this.{{camelCaseFieldName}} = value;
    }
    {{/messageFields}}
    return this;
  };

  {{messageName}}.Builder.prototype.build = function() {
    var message = new {{messageName}}();
    {{#messageFields}}
    message.{{camelCaseFieldName}} = this.{{camelCaseFieldName}};
    {{#isRequired}}
    if (message.{{camelCaseFieldName}} == undefined) {
      throw new Error("{{camelCaseFieldName}} is required.");
    }
    {{/isRequired}}
    {{/messageFields}}
    return message;
  };

  // Sub enums.
  {{#subEnums}}
  {{messageName}}.{{enumName}} = {{> enumDefinition}}
  {{/subEnums}}

  // Sub messages.
  var _subMessages = {};
  {{#subMessages}}
  _subMessages.{{messageName}} = {{> messageDefinition}}
  {{/subMessages}}

  for (var subMessageName in _subMessages) {
    {{messageName}}[subMessageName] = _subMessages[subMessageName];
  }

  return {{messageName}};
})();
